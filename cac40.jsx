/*  cac40.jsx - CAC 40 *//* Create a grapsh showing the value of the CAC 40 in the last 6 business days *//* HELPERS *//* Friend String insert function */String.prototype.insert = function (index, string) {  if (index > 0)    return this.substring(0, index) + string + this.substring(index, this.length);  else    return string + this;};/* Friend Array min and max functions */Array.prototype.max = function() {  return Math.max.apply(null, this);};Array.prototype.min = function() {  return Math.min.apply(null, this);};/* CONSTANTS */var hGridStep = 6.5;var vGridStep = 5.843;var lines = 8;var cols = 36;var gridLineSize = 0.1;var gridColor = new RGBColor();gridColor.red = 156;gridColor.green = 155;gridColor.blue = 155;var graphColor = new RGBColor();graphColor.red = 193;graphColor.green = 8;graphColor.blue = 25;var graphPointSize = 4.9;var graphLineSize = 1;var fontName = "SalvoSansCond"; // for lookup/* GLOBAL VARIABLES */var doc;//var days = ["V. 08/05", "L. 11/05", "M. 12/05", "M. 13/05", "J. 14/05", "V. 15/05"];//var values = [5090.39, 5027.87, 4974.65, 4961.86, 5029.31, 4993.82];var days = [];var values = [];var variation;var valFont;var headFont;var dateFont;/* MAIN */if (version.split(".")[0] >= 15) {    if (app.documents.length > 0) {        if (app.activeDocument != null) {            doc = app.activeDocument;            var dlg = new Window('dialog', "CAC 40");            dlg.selectorGroup = dlg.add('group', undefined, 'Selector Group');            dlg.selectorGroup.automaticRadio = dlg.selectorGroup.add('radiobutton', [15,15,100,35], 'Automatic');            dlg.selectorGroup.manualRadio = dlg.selectorGroup.add('radiobutton', [15,15,80,35], 'Manual');            dlg.selectorGroup.manualRadio.value = true;            dlg.selectorGroup.orientation = 'row';                        feedDays();                        dlg.daysInput = dlg.add('group', undefined, 'Input Group');            for (var i = 0; i < 6; i++) {                 dlg.daysInput["daysInput_"+i] = dlg.daysInput.add('edittext', [0,0,50,20], days[i]);            }            dlg.daysInput.orientation = 'row';                        dlg.inputGroup = dlg.add('group', undefined, 'Input Group');            for (var i = 0; i < 6; i++) {                 dlg.inputGroup["valueInput_"+i] = dlg.inputGroup.add('edittext', [0,0,50,20], 0);            }            dlg.inputGroup.orientation = 'row';                        dlg.buttonGroup = dlg.add('group', undefined, 'Button Group');            dlg.buttonGroup.cancelBtn = dlg.buttonGroup.add('button', undefined, 'Cancel', {name:'cancel'});            dlg.buttonGroup.cancelBtn.onClick = function() {dlg.close();};            dlg.buttonGroup.okBtn = dlg.buttonGroup.add('button', undefined, 'OK', {name:'ok'});            dlg.buttonGroup.okBtn.onClick = function() {                if (dlg.selectorGroup.manualRadio.value) {                    //$.writeln("Gathering values:");                    // Gather values in the input group                    var inval = 0;                    for(var key in dlg.inputGroup) {                        if (key.split("_")[0]==="valueInput") {                            var value = parseFloat(dlg.inputGroup[key].text.replace(",","."));                            //$.writeln(" inputValue -> " + value);                            values[parseInt(key.split("_")[1])] = parseFloat(value);                        }                    }                lookupFont();                    } else {                    grabValues();                }                drawGrid();                drawGraph();                drawHeader();                dlg.close();            }            dlg.buttonGroup.orientation = 'row';                        dlg.show();        } else { Window.alert("You must have an active document to run this script."); }    } else { Window.alert("You must open at least one document to run this script."); }} else { Window.alert("Your version of Adobe illustrator is too old to run this script."); }function getDayLetter(num) {    switch (num) {        case 0:            return "D.";            break;        case 1:            return "L.";            break;        case 2:            return "M.";            break;        case 3:            return "M.";            break;        case 4:            return "J.";            break;        case 5:            return "V.";            break;        default:            return "X.";            break;    }}function lookupFont() {    var iCount = textFonts.length;     for(var i=0; i<iCount; i++) {        if (textFonts[i].name == (fontName + "-Bold")) {            valFont = textFonts[i];            headFont = textFonts[i];        } else if (textFonts[i].name == (fontName + "-Regular")) {            dateFont = textFonts[i];        }    }}function feedDays() {    var today = new Date();    var startDay = new Date(today); // StartDay represents the day we are supposed to create the graph on. A Friday.    var incDay = new Date();    startDay.setDate(today.getDate()+(5-today.getUTCDay()));        for (var i = 0; i < 6; i++) {        if (i == 5) {            incDay.setDate(startDay.getDate()-(i+2));        } else {            incDay.setDate(startDay.getDate()-i);        }           var dayLabel = getDayLetter(incDay.getUTCDay()) + " " + incDay.getUTCDate() + "/" + (incDay.getUTCMonth() + 1);        days[5-i] = dayLabel;    }}function grabValues() {    }function drawGrid() {    var centerPoint = doc.activeView.centerPoint;    // Create a "Grid" group    var gridGroup = doc.groupItems.add();    gridGroup.name = "Grid Group";    // Vertical lines of the grid    for (var i = 0; i < lines+1; i++) {        var hline = gridGroup.pathItems.add();        hline.setEntirePath([ [centerPoint[0], centerPoint[1]+i*hGridStep], [centerPoint[0]+vGridStep*cols, centerPoint[1]+i*hGridStep] ]);        hline.filled = true;        hline.fillColor = gridColor;        hline.stroked = false;            hline.strokeColor = gridColor;        hline.strokeWidth = 0.094;    }    // Horizontal lines of the grid    for (var j = 0; j < cols+1; j++) {        var vline = gridGroup.pathItems.add();        vline.setEntirePath([ [centerPoint[0]+j*vGridStep, centerPoint[1]], [centerPoint[0]+j*vGridStep, centerPoint[1]+hGridStep*lines] ]);        vline.filled = true;        vline.fillColor = gridColor;        vline.stroked = false;            vline.strokeColor = gridColor;        vline.strokeWidth = 0.094;    }    // Text legends for the days of the week    for (var k = 0; k < 6; k++) {        var label = gridGroup.textFrames.pointText([centerPoint[0]+(k*(vGridStep*6))+3*vGridStep, centerPoint[1]+hGridStep*lines+2]);        var labelParagraphAttributes = label.paragraphs.add("X. XX/XX");  // ParagraphAttributes        labelParagraphAttributes.justification = Justification.CENTER;                for (var ii = 0; ii < label.characters.length; ii++) {            var lableCharacterAttributes = label.characters[ii];            lableCharacterAttributes.size = 7;            lableCharacterAttributes.textFont = dateFont;        }        label.contents = days[k];    }}function drawGraph() {    var centerPoint = doc.activeView.centerPoint;    // Create a ""Graph" group    var gridGroup = doc.groupItems.add();    gridGroup.name = "Graph Group";        var valuesHPos = [];    var valuesVPos = [];        var minval = Math.min.apply(null, values);    var maxval = Math.max.apply(null, values);    //$.writeln(" minval -> " + minval);    //$.writeln(" maxval -> " + maxval);    // Draws the graph's dots    for (var k = 0; k < 6; k++) {        var multiplicator = (values[k]-minval)*1/(maxval-minval);        //$.writeln(" multiplicator -> " + multiplicator);                valuesHPos[k] = ((centerPoint[1]+graphPointSize/2) + 2*hGridStep) + multiplicator*(4*hGridStep);        valuesVPos[k] = ((centerPoint[0]+(k*(vGridStep*6))+3*vGridStep)-graphPointSize/2);        doc.defaultFillColor = graphColor;        var dot = gridGroup.pathItems.ellipse(valuesHPos[k], valuesVPos[k], graphPointSize, graphPointSize);        doc.fillColor = graphColor;        dot.filled = true;        dot.stroked = false;            }    // Draws the graph's lines    for (var l = 0; l < valuesHPos.length-1; l++) {        var line = gridGroup.pathItems.add();        line.setEntirePath([                 [valuesVPos[l]+graphPointSize/2, valuesHPos[l]-graphPointSize/2],                 [valuesVPos[l+1]+graphPointSize/2, valuesHPos[l+1]-graphPointSize/2]         ]);        line.filled = true;        line.stroked = true;        line.fillColor = graphColor;        line.strokeColor = graphColor;        line.strokeWidth = graphLineSize;    }    // Draw the values    for (var k = 0; k < 6; k++) {        var value = values[k];                $.writeln(" value -> " + value);                var topMargin = 2.3,            bottomMargin = 12.9;                var v = valuesVPos[k],             h = 0;        if (value == minval) {            h = valuesHPos[k] - bottomMargin;        } else if (value == maxval) {            h = valuesHPos[k] + topMargin;         } else {            if (k == 0) {                if (values[k] > values[k+1]) {                    h = valuesHPos[k] + topMargin;                 } else if (values[k] < values[k+1]) {                    h = valuesHPos[k] - bottomMargin;                }            } else if (k == values.length-1) {                if (values[k] > values[k-1]) {                    h = valuesHPos[k] + topMargin;                 } else if (values[k] < values[k-1]) {                    h = valuesHPos[k] - bottomMargin;                }            } else {                if (values[k] > values[k-1] && values[k] > values[k+1]) {                    h = valuesHPos[k] + topMargin;                 } else if (values[k] < values[k-1] && values[k] < values[k+1]) {                    h = valuesHPos[k] - bottomMargin;                } else if (values[k] < values[k-1] && values[k] > values[k+1]) {                    v += 5;                    h = valuesHPos[k] + topMargin;                 } else if (values[k] > values[k-1] && values[k] < values[k+1]) {                    v -= 5;                    h = valuesHPos[k] + topMargin;                 }            }        }        // TODO SET FONT AND BOLD        var label = gridGroup.textFrames.pointText([v+graphPointSize/2, h]);                var labelParagraphAttributes = label.paragraphs.add("X XXX,XX");  // ParagraphAttributes        labelParagraphAttributes.justification = Justification.CENTER;                for (var ii = 0; ii < label.characters.length; ii++) {            var lableCharacterAttributes = label.characters[ii];            lableCharacterAttributes.size = 8;            lableCharacterAttributes.textFont = valFont;        }                var labelText = ""+ values[k];        labelText = labelText.replace(".", ",");        labelText = labelText.insert(1, " ");        label.contents = labelText;    }    variation = ((values[values.length-1]/values[0])-1)*100;}function drawHeader() {    var centerPoint = doc.activeView.centerPoint;        // Create header group    var headGroup = doc.groupItems.add();    headGroupname = "Header Group";        // Darw title    var labelTitle = headGroup.textFrames.pointText([centerPoint[0]-3.5, centerPoint[1]+hGridStep*lines+15]);    var labelTitleParagraphAttributes = labelTitle.paragraphs.add("CAC 40");  // ParagraphAttributes        for (var i = 0; i < labelTitle.characters.length; i++) {        var lableCharacterAttributes = labelTitle.characters[i];        lableCharacterAttributes.size = 12;        lableCharacterAttributes.textFont = headFont;    }    $.writeln(" diff -> " + variation);    var valueString = "";        valueString = Math.round(variation*100)/100 + "";    if (variation < 0) {        valueString = valueString.replace("-","- ");    } else if (variation > 0) {        valueString = "+ " + valueString;    }    valueString = valueString.replace(".", ",");    valueString += " %";    // Draw variation percentage    var labelValue = headGroup.textFrames.pointText([centerPoint[0]+150, centerPoint[1]+hGridStep*lines+15]);    var labelValueParagraphAttributes = labelValue.paragraphs.add(valueString);    for (var i = 0; i < labelValue.characters.length; i++) {        var lableCharacterAttributes = labelValue.characters[i];        lableCharacterAttributes.size = 13;        lableCharacterAttributes.textFont = headFont;    }    // TODO WRITE GLYPH}